<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

/**
 * @property  Authex authex
 */
 
class Gebruiker extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Gebruiker_model');
    } 

    /*
     * Listing of gebruiker
     */
    function index()
    {
        $data['gebruiker'] = $this->Gebruiker_model->get_all_gebruiker();
        
        $data['_view'] = 'gebruiker/index';
        $this->load->view('layouts/main',$data);
    }


    function login(){
        $data['titel'] = 'Aanmelden';
        $data['gebruiker'] = $this->authex->getGebruikerInfo();

        $partials = array('hoofding' => 'main_header',
            'menu' => 'main_menu',
            'inhoud' => 'home_aanmelden',
            'voetnoot' => 'main_footer');

        $this->template->load('main_master', $partials, $data);
    }

    public function checklogin()
    {
        $email = $this->input->post('email');
        $wachtwoord = $this->input->post('wachtwoord');

        if ($this->authex->meldAan($email, $wachtwoord)) {
            redirect('home/index');
        } else {
            redirect('home/toonFout');
        }
    }

    public function meldAf()
    {
        $this->authex->meldAf();
        redirect('home/index');
    }
    /*
     * Adding a new gebruiker
     */
    function add()
    {   
        if(isset($_POST) && count($_POST) > 0)     
        {   
            $params = array(
				'gebruikertypeId' => $this->input->post('gebruikertypeId'),
				'klasId' => $this->input->post('klasId'),
				'trajectId' => $this->input->post('trajectId'),
				'afspraakId' => $this->input->post('afspraakId'),
				'voornaam' => $this->input->post('voornaam'),
				'achternaam' => $this->input->post('achternaam'),
				'email' => $this->input->post('email'),
				'passwoord' => $this->input->post('passwoord'),
            );
            
            $gebruiker_id = $this->Gebruiker_model->add_gebruiker($params);
            redirect('gebruiker/index');
        }
        else
        {            
            $data['_view'] = 'gebruiker/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a gebruiker
     */
    function edit($id)
    {   
        // check if the gebruiker exists before trying to edit it
        $data['gebruiker'] = $this->Gebruiker_model->get_gebruiker($id);
        
        if(isset($data['gebruiker']['id']))
        {
            if(isset($_POST) && count($_POST) > 0)     
            {   
                $params = array(
					'gebruikertypeId' => $this->input->post('gebruikertypeId'),
					'klasId' => $this->input->post('klasId'),
					'trajectId' => $this->input->post('trajectId'),
					'afspraakId' => $this->input->post('afspraakId'),
					'voornaam' => $this->input->post('voornaam'),
					'achternaam' => $this->input->post('achternaam'),
					'email' => $this->input->post('email'),
					'passwoord' => $this->input->post('passwoord'),
                );

                $this->Gebruiker_model->update_gebruiker($id,$params);            
                redirect('gebruiker/index');
            }
            else
            {
                $data['_view'] = 'gebruiker/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The gebruiker you are trying to edit does not exist.');
    } 

    /*
     * Deleting gebruiker
     */
    function remove($id)
    {
        $gebruiker = $this->Gebruiker_model->get_gebruiker($id);

        // check if the gebruiker exists before trying to delete it
        if(isset($gebruiker['id']))
        {
            $this->Gebruiker_model->delete_gebruiker($id);
            redirect('gebruiker/index');
        }
        else
            show_error('The gebruiker you are trying to delete does not exist.');
    }
    
}
